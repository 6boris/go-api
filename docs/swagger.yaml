basePath: '{{.BasePath}}'
host: '{{.Host}}'
info:
  contact:
    email: kylesliu@outlook.com
    name: API Support
    url: https://github.com/dicf
  description: '{{.Description}}'
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: https://kyle.link/
  title: '{{.Title}}'
  version: '{{.Version}}'
paths:
  /api/v1/articles:
    delete:
      consumes:
      - application/json
      description: 根据传入的参数删除文章
      parameters:
      - description: Title
        in: query
        name: title
        type: integer
      produces:
      - application/json
      responses:
        "200": {}
      summary: 删除文章
      tags:
      - 文章管理
    get:
      consumes:
      - application/json
      description: 根据传入的参数筛选文章
      parameters:
      - description: Title
        in: query
        name: title
        type: integer
      produces:
      - application/json
      responses:
        "200": {}
      summary: 获取文章列表
      tags:
      - 文章管理
    post:
      consumes:
      - application/json
      description: 根据传入的参数创建文章
      parameters:
      - description: Title
        in: query
        name: title
        type: integer
      produces:
      - application/json
      responses:
        "200": {}
      summary: 创建文章
      tags:
      - 文章管理
    put:
      consumes:
      - application/json
      description: 根据传入的参数修改文章
      parameters:
      - description: Title
        in: query
        name: title
        type: integer
      produces:
      - application/json
      responses:
        "200": {}
      summary: 修改文章
      tags:
      - 文章管理
  /api/v1/articles/{id}:
    get:
      consumes:
      - application/json
      description: 根据传入的ID获取文章
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200": {}
      summary: 获取单篇文章
      tags:
      - 文章管理
  /api/v1/tags:
    get:
      consumes:
      - application/json
      description: 根据传入的参数筛选标签
      parameters:
      - description: 标签名称
        in: query
        name: name
        type: string
      produces:
      - application/json
      responses:
        "200": {}
      summary: 获取标签列表
      tags:
      - 标签管理
    post:
      consumes:
      - application/json
      description: 根据传入的参数创建标签
      parameters:
      - description: 标签名称
        in: query
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200": {}
      summary: 创建标签
      tags:
      - 标签管理
  /api/v1/tags/{id}:
    delete:
      consumes:
      - application/json
      description: 根据传入的参数删除标签
      parameters:
      - description: 标签ID
        in: path
        name: id
        type: integer
      produces:
      - application/json
      responses:
        "200": {}
      summary: 删除标签
      tags:
      - 标签管理
    get:
      consumes:
      - application/json
      description: 根据传入的ID获取标签
      parameters:
      - description: 标签ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200": {}
      summary: 获取单个标签
      tags:
      - 标签管理
    put:
      consumes:
      - application/x-www-form-urlencoded
      description: 根据传入的参数修改标签
      parameters:
      - description: 标签ID
        in: path
        name: id
        required: true
        type: integer
      - description: 标签名称
        in: formData
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200": {}
      summary: 修改标签
      tags:
      - 标签管理
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: Authorization
    type: apiKey
  BasicAuth:
    type: basic
  OAuth2AccessCode:
    authorizationUrl: https://example.com/oauth/authorize
    flow: accessCode
    scopes:
      admin: ' Grants read and write access to administrative information'
    tokenUrl: https://example.com/oauth/token
    type: oauth2
  OAuth2Application:
    flow: application
    scopes:
      admin: ' Grants read and write access to administrative information'
      write: ' Grants write access'
    tokenUrl: https://example.com/oauth/token
    type: oauth2
  OAuth2Implicit:
    authorizationUrl: https://example.com/oauth/authorize
    flow: implicit
    scopes:
      admin: ' Grants read and write access to administrative information'
      write: ' Grants write access'
    type: oauth2
  OAuth2Password:
    flow: password
    scopes:
      admin: ' Grants read and write access to administrative information'
      read: ' Grants read access'
      write: ' Grants write access'
    tokenUrl: https://example.com/oauth/token
    type: oauth2
swagger: "2.0"
